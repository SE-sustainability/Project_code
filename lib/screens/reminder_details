import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:geolocator/geolocator.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ReminderScreen(),
      theme: ThemeData(
        primaryColor: Colors.black,
      ),
    );
  }
}

class ReminderScreen extends StatefulWidget {
  @override
  _ReminderScreenState createState() => _ReminderScreenState();
}

class _ReminderScreenState extends State<ReminderScreen> {
  XFile? _imageFile;
  DateTime? _dateTime;


  Future<void> _pickImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.camera);

    setState(() {
      _imageFile = image;
    });
  }
  Future<void> _pickDateTime() async {
    final DateTime? date = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (date != null) {
      final TimeOfDay? time = await showTimePicker(
        context: context,
        initialTime: TimeOfDay.now(),
      );
      if (time != null) {
        setState(() {
          _dateTime = DateTime(date.year, date.month, date.day, time.hour, time.minute);
        });
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: Icon(Icons.cancel),
          onPressed: () {},
        ),
        title: Text(
          'New Reminder',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: () {},
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              decoration: InputDecoration(
                hintText: 'Title',
                border: OutlineInputBorder(),
                labelText: 'Title',
              ),
            ),
            SizedBox(height: 16),
            TextField(
              maxLines: 5,
              decoration: InputDecoration(
                hintText: 'Notes',
                border: OutlineInputBorder(),
                labelText: 'Notes',
              ),
            ),
            SizedBox(height: 16),
            ListTile(
              leading: Icon(Icons.date_range), 
              title: Text('Date & Time'), 
              trailing: Icon(Icons.arrow_forward_ios), 
              onTap: _pickDateTime,
            ),
            ListTile(
              leading: Icon(Icons.location_on), // Location icon
              title: Text('Location'), // Location label
              trailing: Icon(Icons.arrow_forward_ios), // Arrow icon
              onTap: () async {
                // Handle location selection
                LocationPermission permission = await Geolocator.requestPermission();
                if (permission == LocationPermission.always ||
                    permission == LocationPermission.whileInUse) {
                  Position position = await Geolocator.getCurrentPosition(
                      desiredAccuracy: LocationAccuracy.high);
                  // Do something with the obtained position
                  print('Latitude: ${position.latitude}, Longitude: ${position.longitude}');
                } else {
                  // Handle the case when location permission is not granted
                  // You can show a dialog or request permission again
                  print('Location permission not granted.');
                }
              },
            ),
            ListTile(
              leading: Icon(Icons.priority_high), // Priority icon
              title: Text('Priority'), // Priority label
              trailing: Icon(Icons.arrow_forward_ios), // Arrow icon
              onTap: () {
                // Handle priority selection
                // You can show a dropdown or dialog for priority options
              },
            ),

            ListTile(
              leading: Icon(Icons.camera), // Camera icon
              title: Text('Take Picture'), // Take Picture label
              trailing: Icon(Icons.arrow_forward_ios), // Arrow icon
              onTap: _pickImage, // Call the pick image function on tap
            ),
            _imageFile != null
                ? Image.file(
              File(_imageFile!.path),
              height: 100,
              width: 100,
            )
                : Container(),
            ListTile(
              leading: Text(
                'Mode',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Reminders',
                    style: TextStyle(
                      color: Colors.green,
                    ),
                  ),
                  Icon(Icons.arrow_forward_ios),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
